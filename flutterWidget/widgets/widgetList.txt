All flutter widget list :- https://docs.flutter.dev/development/ui/widgets
1. MaterialApp(); // it is used for app setup
2. Scaffold(); // Each screen parent Widget
   a. AppBar();

3. Column(
   children:[

   ]
  );

4. Row(
   children:[

   ]
);

5. ElevatedButton(
   onPressed:(){

   },
   child:Text("button Title")
);

6. Container(
   child:Text("container"),
)

7. Center(
   child:Text("center the content"),
)
8. Buttons 
  1. ElevatedButton(
    style:BottonStyle()
  )

  2. TextButton(
              style: TextButton.styleFrom(
                foregroundColor : Colors.black,
              ),
              onPressed: () {},
              child: const Text("Text Button"),
            )

  3. OutlinedButton(
              style: OutlinedButton.styleFrom(
                foregroundColor: Colors.black,
                side: const BorderSide(
                  color: Colors.green
                )
              ),
              onPressed: (() {
              
            }), 
            child: const Text("Outlined Button"),
            )

      4. OutlinedButton.icon(
              style: OutlinedButton.styleFrom(
                foregroundColor: Colors.black,
                side: const BorderSide(
                  color: Colors.green
                )
              ),
              onPressed: (() {
              
            }), 
           label: const Text("Outlined Button"),
           icon: const Icon(Icons.home_max_outlined),
            )
      5. ElevatedButton.icon(
              style: OutlinedButton.styleFrom(
                foregroundColor: Colors.black,
                side: const BorderSide(
                  color: Colors.green
                )
              ),
              onPressed: (() {
              
            }), 
           label: const Text("Outlined Button"),
           icon: const Icon(Icons.home_max_outlined),
            )
      6.  TextButton.icon(
              style: TextButton.styleFrom(
                foregroundColor : Colors.black,
              ),
              onPressed: () {},
              label: const Text("Text Button"),
              icon: const Icon(Icons.access_alarm),
            )
      7.  IconButton(
              onPressed: () {},
             icon: const Icon(Icons.home_max_outlined),
             )
       
  9. InkWell ===> it is like Pressable in react-native ===> InkWell(
              onTap: () {
                
              },
              child: const Text("Inkwell"),
          )

10. Flexible

11. Expanded

12. Stack

13. Card
       Card(
              elevation: 2,
              shape:
               RoundedRectangleBorder(borderRadius: BorderRadius.circular(50)),
              child: Image.network(
                "https://imgd-ct.aeplcdn.com/370x208/n/cw/ec/106257/venue-exterior-right-front-three-quarter-2.jpeg?isig=0&q=75",
                width: 200,
                height: 200,
                ),
             )

14. ListView -> scrollable list 

15 ListTile

16. GridView ->

17. GridTile

18. Image

19. Icon

20. GestureDetector

21. SingleChildScrollView(

  ) 
  // making whole page scrollable
   body:SingleChildScrollView(
          child:  Column(
          children: []
          ),
        )

   //  when we want to use SingleChildScrollView inside any container than
    we should set the heigt of container for example :
        Container(
              height: 50,
              child: SingleChildScrollView(
                child: Column(children: [
                  ...users.map((e) => Text(e)),
                  ...users.map((e) => Text(e)),
                  ...users.map((e) => Text(e)),
                ],)
              ),
            )

22. ListView

        Container(
                color: Colors.amber,
                alignment: Alignment.center,
                height: 50,
                width: double.infinity,
                child: ListView.builder(
                  itemBuilder: (context, index) {
                    return Text(
                      users[index],
                      textAlign: TextAlign.center,
                    );
                  },
                  itemCount: users.length,
                ),
              )

  23. TextField() :

      TextField(
                  keyboardType: TextInputType.text,
                  // onSubmitted called when done button from keyboard is clicked 
                  onSubmitted: (value) {
                    print(value);
                  },
                  controller: _textFieldController,
                  decoration: InputDecoration(
                    // enabled: false, // it will disable the text field
                    labelText: "Email Address",
                    hintText: "abhiwebdev2718@gmail.com",
                    suffixIcon: GestureDetector(
                      onTap: () {
                        _setCount(_textFieldController.text);
                      },
                      child: const Icon(Icons.email_outlined),
                    ),
                    disabledBorder: const OutlineInputBorder(
                        borderSide: BorderSide(
                      color: Colors.green,
                      width: 2,
                    )), // when text field is disabled i.e enabled: false
                    enabledBorder: const OutlineInputBorder(
                        borderSide: BorderSide(
                      color: Color.fromARGB(221, 173, 137, 137),
                      width: 2,
                    )), // when textField is enable i.e enabled: true bydefault it is true
                    focusedBorder: const OutlineInputBorder(
                        borderSide: BorderSide(
                      color: Colors.blue,
                      width: 2,
                    ) // when inputBox receive focous (when user clicks)
                        ),
                    focusedErrorBorder: const OutlineInputBorder(
                      borderSide: BorderSide(
                        color: Colors.red,
                        width: 2,
                      ),
                    ),
                    errorBorder: const OutlineInputBorder(
                      borderSide: BorderSide(
                        color: Colors.red,
                        width: 2,
                      ),
                    ),
                  ),
                )

24.  FloatingActionButton :
       Scaffold(
        appBar: AppBar(
          title: const Text("Flutter Widget"),
          actions: [
           IconButton(onPressed: () {
             
           }, icon:  Icon(
              Icons.add,
            ),
            )
          ],
        ),
        floatingActionButton: FloatingActionButton(onPressed: () {
          
        },
        child: Icon(
          Icons.add
        ),
        ),
        floatingActionButtonLocation: FloatingActionButtonLocation.endFloat,
        )
25. Bottom Modal Sheet :

 void openModalBottomSheet(BuildContext context) {
  showModalBottomSheet(
        isDismissible: true,
        enableDrag: true,
        context: context,
        builder: (_) {
          return (Column(
            children: const [Text("Modal Bottom Sheet")],
          ));
        });
  }

26. Adding theme and using it 
   MaterialApp(
        theme: ThemeData(primarySwatch: Colors.green),
        home: const _App(),
      )

    Accessing color from theme :
     style: ElevatedButton.styleFrom(
          backgroundColor: Theme.of(context).primaryColorDark,
          foregroundColor: Colors.white,
          padding:const EdgeInsets.all(16),
        )
27.  Adding custom fonts :- https://www.udemy.com/course/learn-flutter-dart-to-build-ios-android-apps/learn/lecture/14951060#overview
  steps:
 1. download the google font put inside assets/fonts folder 
 2. add in pubspec.yaml file like this
   fonts:
    - family: OpenSans
      fonts:
        - asset: assets/fonts/OpenSans-Regular.ttf
        - asset: assets/fonts/OpenSans-Bold.ttf
          weight: 700
    - family: Quicksand
      fonts:
        - asset: assets/fonts/Quicksand-Regular.ttf
        - asset: assets/fonts/Quicksand-Light.ttf
        - asset: assets/fonts/Quicksand-Bold.ttf
          weight: 700
    3. tell to material app to use the custom font as default font
    MaterialApp(
        theme: ThemeData(
          primarySwatch: Colors.green,
          fontFamily: "Quicksand"
          ),
        home: const _App(),
      )
28. AppBar title text theme settings
 MaterialApp(
        theme: ThemeData(
          primarySwatch: Colors.green,
          fontFamily: "Quicksand",
          appBarTheme: AppBarTheme(
            titleTextStyle: ThemeData.light()
                .textTheme
                .copyWith(
                  headline6: const TextStyle(
                    fontFamily: "OpenSans",
                    fontSize: 20,
                  ),
                )
                .headline6,
          ),
        ),
        home: const _App(),
      )

29.  Setting Up Text Theme 
ThemeData(
          primarySwatch: Colors.green,
          fontFamily: "Quicksand",
          textTheme: ThemeData.light()
                .textTheme
                .copyWith(
                  titleMedium: const TextStyle(
                    fontFamily: "OpenSans",
                    fontSize: 16,
                    color: Colors.red
                  ),
                ),
          appBarTheme: AppBarTheme(
            titleTextStyle: ThemeData.light()
                .textTheme
                .copyWith(
                  headline6: const TextStyle(
                    fontFamily: "OpenSans",
                    fontSize: 20,
                  ),
                )
                .headline6,
          ),
        )
  ===> Accessing textTheme -> Theme.of(context).textTheme.titleMedium

30 ==> We learn in theming to set global them for :-
        1. primarySwatch
        2. SecondaryColor -> the color used by floatingActionButton

        3. fontFamily -> global FontFamily 
        4. Setting up AppBarTheme -> (titleTextTheme)
        5. FontTheme -> global FontTheme and using them

        for more refrence see :- https://www.udemy.com/course/learn-flutter-dart-to-build-ios-android-apps/learn/lecture/14951060#overview
===================================================================================
# styling Widgets 

1. Text(
   style: TextStyle(
                fontSize: 26
              ),
   textAlign: TextAlign.center,
) 

2. Button Style 
   first Method => by using ButtonStyle class

   ElevatedButton(
        style: ButtonStyle(
          backgroundColor: MaterialStateProperty.all(Colors.yellow),
          foregroundColor: MaterialStateProperty.all(Colors.black),
          padding:MaterialStateProperty.all(
            const EdgeInsets.symmetric(
            vertical: 20,
            horizontal: 16
            )
            ) 
        ),
        onPressed: onPressed,
        child: const Text("Click Me!"),
      )

   Second way => since Each Button is having styleFrom from static method wich internally return the object of Button Style 
   ElevatedButton(
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.green,
          foregroundColor: Colors.white,
          padding:const EdgeInsets.all(16),
        ),
        onPressed: onPressed,
        child: const Text("Click Me!"),
      )

  styling container :

        Container(
              padding:const EdgeInsets.all(2),
              width: double.infinity,
              margin: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.black38,
                border:Border.all(
                  color: Colors.black,
                  width: 2,
                ),
                borderRadius: const BorderRadius.all(Radius.circular(16))
              ),
              child: Text(
                '$_count',
                style: const TextStyle(fontSize: 26),
                textAlign: TextAlign.center,
              ),
            ) 

   Giving Border 

     1. Giving Border to singleSide
    border: Border(
                  bottom:BorderSide(
                  color: Colors.red,
                  width: 2
                  ) 
              )  
      2. Give Border to all sides
             border:Border.all(
                  color: Colors.black,
                  width: 2,
                )  
                
  Giving borderRadius 
   borderRadius: const BorderRadius.all(Radius.circular(16))        
=====================================================================================
# Notes :-
1. Passing callback function in onther component
import 'package:flutter/material.dart';

class CustomButton extends StatelessWidget {
  final VoidCallback onPressed; // callback function without any arguments and void return type
  final Function sum; // it can take arguments and have some return type

  const CustomButton(this.onPressed, this.sum, {super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      child: ElevatedButton(
        onPressed: onPressed,
        child: const Text("Click Me!"),
      ),
    );
  }
}

2. Mapping Lists to Widgets 
class _App extends StatefulWidget {
  _App({super.key});
  @override
  State<_App> createState() => _AppState();
}

class _AppState extends State<_App> {
  var _count = 0;
  var users = ["Ram", "Sita"];
  void _setCount() {
    setState(() {
      _count += 1;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: const Text("Flutter Widget"),
        ),
        body: Column(
          children: [
            Container(
              width: double.infinity,
              margin: const EdgeInsets.all(16),
              child: Text(
                '$_count',
                style: const TextStyle(fontSize: 26),
                textAlign: TextAlign.center,
              ),
            ),
            CustomButton(
              _setCount,
              () {},
            ),
            ...users.map((e) => Text(e)), // <=======
          ],
        ),
      ),
    );
  }
}

3. The "null" Value & Null Safety
 The initial value of the variable decleared with var is null 
 To tell flutter any value is not null we are using ! mark , since flutter >= 2.12.0 is having null Safety on so in background it is checking the null safety  

